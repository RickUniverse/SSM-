<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
                           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">


    <!--配置SpringIOC自动扫描的包
        Spring管理所有的业务逻辑组件。。。
    -->
    <context:component-scan base-package="org.ssmsuper">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>

    <!--导入配置-->
    <context:property-placeholder location="classpath:/properties/dbconfig.properties"/>

    <!--使用Druid数据库连接池-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!-- Spring事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--
        整合MyBatis
            目的：1，spring管理所有组件，mapper的实现类
                    service==>Dao  @Autowired ：自动注入mapper
                 2,spring用来管理事务，spring声明事务
    -->
    <bean id="sqlSessionFactoryBean"
          class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--configLocation指定全局配置文件的路径-->
        <property name="configLocation" value="classpath:/mybatis/mybatis-config.xml"/>
        <!--mapperLocations：指定mapperxml文件的路径-->
        <!--

            这里需要打开注释
            classpath*: 表示所有依赖的模块的resources 都扫描
        -->
        <!--<property name="mapperLocations" value="classpath:org/mybatis/mapper/*.xml"/>-->
        <property name="mapperLocations">
            <list>
                <value>classpath*:mybatis/*Mapper.xml</value>
            </list>
        </property>
    </bean>

    <!--设置一个可以批量删除的sqlSession需要使用时直接使用@Autowrite注解注入-->
    <bean id="sqlSessionBatch"
          class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactoryBean"/>
        <constructor-arg name="executorType" value="BATCH"/>
    </bean>



    <!--扫描所有的mapper接口的实现，让这些mapper能被自动注入-->
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <!--<mybatis-spring:scan base-package="org.mybatis.dao"/>-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="org.ssmsuper.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBean"></property>
    </bean>

    <!--
        创建事务管理器
    -->
    <bean id="transcationManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--设置数据连接池源-->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--开启事务注解-->
    <tx:annotation-driven transaction-manager="transcationManager"/>

    <!--2，xml方式配置事务, (必要的主要的都是使用配置式)-->
    <!--配置通知, 事务增强, 事务如何切入-->
    <tx:advice id="txadvice" transaction-manager="transcationManager">
        <!--配置事务参数-->
        <tx:attributes>
            <!--method:  指定那种规则的方法上添加事务-->
            <!--<tx:method name="transferAccount" propagation="REQUIRED" timeout="-1"/>-->
            <!--<tx:method name="transfer*" propagation="REQUIRED"/>-->


            <!--
                rollback-for: 事务的回滚策略, 默认的回滚策略是运行时异常才会回滚, java.lang.Exception: 表示所有异常都要回滚
                 name="*" : 所有方法都是事务方法
            -->
            <tx:method name="*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="java.lang.Exception" timeout="-1"/>
            <!-- 如果是query开头则是只读事务,可以提高性能 -->
            <tx:method name="query*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <!--配置切入点和切面-->
    <aop:config>
        <!--配置切入点
            execution(* org.ssmsuper.service..*(..)) : 表示所有的service中的类都加上事务
        -->
        <aop:pointcut id="pt" expression="execution(* org.ssmsuper.service..*(..))"/>
        <!--配置切面-->
        <aop:advisor advice-ref="txadvice" pointcut-ref="pt"/>
    </aop:config>

</beans>